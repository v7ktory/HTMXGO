// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package postgresdb

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  name, email, password
) VALUES (
  $1, $2, $3
) RETURNING id, name, email, password
`

type CreateUserParams struct {
	Name     string
	Email    string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const deleteUsers = `-- name: DeleteUsers :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUsers(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUsers, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, name, email, password FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
  set name = $1
WHERE id = $1
`

func (q *Queries) UpdateUser(ctx context.Context, name string) error {
	_, err := q.db.Exec(ctx, updateUser, name)
	return err
}
